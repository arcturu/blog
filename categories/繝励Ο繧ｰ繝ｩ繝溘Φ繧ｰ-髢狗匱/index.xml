<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>プログラミング / 開発 on arcturu&#39;s posts</title>
    <link>http://blog.arcturu.com/categories/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0-%E9%96%8B%E7%99%BA/</link>
    <description>Recent content in プログラミング / 開発 on arcturu&#39;s posts</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <lastBuildDate>Wed, 16 Dec 2015 16:25:42 +0000</lastBuildDate>
    
	<atom:link href="http://blog.arcturu.com/categories/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0-%E9%96%8B%E7%99%BA/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>twoproc（的な何か）でインオーダパイプラインコアを書く</title>
      <link>http://blog.arcturu.com/2015/12/17/276/</link>
      <pubDate>Wed, 16 Dec 2015 16:25:42 +0000</pubDate>
      
      <guid>http://blog.arcturu.com/2015/12/17/276/</guid>
      <description>これはCPU実験 Advent Calendar 2015の17日目の記事です。
CPU 実験の 1st アーキテクチャとして実装したインオーダパイプラインコアについて
 構成 ハマったポイント  を中心にまとめました。
完全なソースコードは https://github.com/arcturu/CarteletV1 にあります。
twoprocとは twoproc とは VHDL のデザイン手法のひとつで、適当に書くとしっちゃかめっちゃかになりがちな VHDL コードの構造化と、バグの予防に非常に役立ちます。
詳細については twoprocの書き方 と、リンク先ブログ内にあるスライドが非常にわかりやすいのでそちらを参照して下さい。
僕が感じた twoproc を採用する直接的なメリットとしては
 意図しないラッチが発生しにくい ラッチを消しやすい 構造化されてわかりやすい (twoproc のメリットというよりも record 文のメリット) データの流れが理解しやすい  などがあります。
パイプライン構成 パタヘネを参考に以下の四段構成にしました。
 命令フェッチ (Instruction Fetch: IF) デコード・レジスタアクセス (Instruction Decode / Register Read: ID) 実行 (Execute: EX) レジスタ書き戻し (Write Back: WB)  パタヘネでは五段目としてメモリアクセスフェーズがありますが、Cartelet v1 (1st アーキテクチャ) ではメモリリード命令も実行フェーズ内で完結させるようにしました。このようにした理由は、キャッシュメモリをつけるとヒット時とミス時でアクセスに必要なクロック数が変わり、それを違うパイプライン段で受けるのがしんどかったためです。
Cartelet v1 ではリードに 0 クロックしかかからないフリップフロップのキャッシュを 16 個つけていますが、実行フェーズでの挙動は</description>
    </item>
    
  </channel>
</rss>